{"version":3,"sources":["graphics/arrow.svg","Components/header.js","Components/day.js","api/getanime.js","Components/container.js","Components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","aria-label","Day","React","memo","props","styledDay","background","ani","image","id","title","airing","day","ldm","style","onClick","console","log","window","open","parseInt","today","toString","padStart","studio","name","titlelist","getSeason","year","season","a","fetch","then","res","status","ok","error","response","json","resJSON","getAnimelist","anime","month","animelist","el","push","map","mal_id","airing_start","image_url","producers","sortAnime","getAnimeByMonth","sort","b","getLastDayOfMonth","Date","getMonth","getDate","newlist","length","fillNewList","firstDayOfMonth","getTime","lastDayOfMonth","forEach","index","currentDate","fill","animeScissors","animeJSON","Loading","code","HeadMenu","changeDate","bind","alt","transform","src","arrow","monthClick","date","yearClick","Container","useState","titles","setTitles","setDate","isLoading","setLoadingState","isError","setErrorState","useEffect","getSeasonByMonth","document","getRandomMonth","rMonth","Math","ceil","random","e","direction","months","findIndex","i","key","Footer","href","target","rel","height","width","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,mC,2MCqB5BC,G,YAlBA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKC,aAAW,YAAYD,UAAU,QAAtC,MAGA,yBAAKA,UAAU,QACb,yBAAKC,aAAW,sBAAsBD,UAAU,QAAhD,cAGA,yBAAKC,aAAW,qBAAqBD,UAAU,QAA/C,a,4CC2COE,G,MAtDHC,IAAMC,MAAK,SAACC,GACtB,IAOIC,EAAY,CACdC,WAAW,gEAAD,OACRF,EAAMG,IAAMH,EAAMG,IAAIC,MAAQ,GADtB,8BAKZ,OACE,yBACER,aACEI,EAAMG,IAAIE,GAAV,mBACgBL,EAAMG,IAAIG,MAD1B,kCACyDN,EAAMG,IAAII,QAC/D,GAENZ,UAAS,cAAUK,EAAMG,IAAIK,IAAoB,GAAd,YAA1B,YACPR,EAAMK,GAAKL,EAAMS,IAAM,SAAW,IAEpCC,MAAOV,EAAMG,IAAIC,MAAQH,EAAY,KACrCU,QAxBkB,WACpBC,QAAQC,IAAI,mBACRb,EAAMG,IAAIE,IACZS,OAAOC,KAAP,wCAA6Cf,EAAMG,IAAIE,IAAM,YAuB7D,yBACEV,UAAS,iBACPqB,SAAShB,EAAMK,MAAQL,EAAMiB,MAAQ,QAAU,KAGhDjB,EAAMG,IAAIK,IACPR,EAAMG,IAAIK,IAAIU,WAAWC,SAAS,EAAG,KACrCnB,EAAMK,IAAML,EAAMS,IAClBT,EAAMK,GACN,IAEN,6BACE,yBAAKV,UAAU,YACZK,EAAMG,IACHH,EAAMG,IAAIG,MACV,4VAEN,yBAAKX,UAAU,eACZK,EAAMG,IAAIiB,OACPpB,EAAMG,IAAIiB,OAAOC,KACjB,qCC9CHC,EAAY,GAEjBC,EAAS,uCAAG,WAAOC,EAAMC,GAAb,iBAAAC,EAAA,sEACOC,MAAM,GAAD,OALlB,kEAKkB,kBAAiBH,EAAjB,YAAyBC,EAAzB,MAEzBG,MAAK,SAACC,GASL,OAPmB,MAAfA,EAAIC,QACNlB,QAAQC,IAAI,sBAGTgB,EAAIE,IACPnB,QAAQoB,MAAM,oBAETH,KAZK,cACVI,EADU,gBAgBMA,EAASC,OAhBf,cAgBVC,EAhBU,yBAiBTA,EAAO,OAjBE,2CAAH,wDAqDTC,EAAe,SAACC,EAAOC,EAAOd,GAClC,IAAIe,EAAY,GAIhB,IAAK,IAAMC,KAHXD,EAAUE,KAAKJ,EAAMK,KAAI,SAACF,GAAD,OAAQA,MACjCD,EAAYA,EAAU,GAGpBA,EAAUC,GAAM,CACdnC,GAAIkC,EAAUC,GAAIG,OAClBrC,MAAOiC,EAAUC,GAAIlC,MACrBC,OAAQgC,EAAUC,GAAII,aACtBxC,MAAOmC,EAAUC,GAAIK,UACrBzB,OAAQmB,EAAUC,GAAIM,UAAU,IAQpC,OALAxB,EAAYiB,EACZQ,IACAC,EAAgBV,EAAOd,IAGhB,GAGHuB,EAAY,WAEhB,IAAIR,EAAS,YAAOjB,GAEpBiB,EAAUU,MAAK,SAACvB,EAAGwB,GACjB,OAAIxB,EAAEnB,OAAS2C,EAAE3C,OACR,EACEmB,EAAEnB,OAAS2C,EAAE3C,QACd,EACI,KAGhBe,EAAS,YAAOiB,IAILY,EAAoB,SAACb,EAAOd,GACvC,OAAO,IAAI4B,KACT5B,EACA,IAAI4B,KAAJ,aAAed,EAAf,YAAwBd,IAAQ6B,WAAa,EAC7C,GACAC,WAGEN,EAAkB,SAACV,EAAOd,GAC9B,IAAIe,EAAS,YAAOjB,GAChBiC,EAAU,GAEdA,EAAQC,OAAS,GACjBD,EAAUE,EAAYF,EAASjB,EAAOd,GAGtC,IAAIkC,EAAkB,IAAIN,KAAJ,aAAed,EAAf,YAAwBd,IAAQmC,UAClDC,EAAiB,IAAIR,KAAJ,UAChBD,EAAkBb,EAAOd,GADT,YACkBc,EADlB,YAC2Bd,IAC9CmC,UAEFpB,EAAUsB,SAAQ,SAACnC,EAAGoC,GACpB,IAAIC,EAAc,IAAIX,KAAK1B,EAAEnB,QAAQoD,UAErC,OAAII,GAAeH,GAAkBG,GAAeL,IAGlDhC,EAAElB,IAAM,IAAI4C,KAAK1B,EAAEnB,QAAQ+C,UAAY,EACvCC,EAAQ7B,EAAElB,IAAM,GAAKkB,GACd,MAMXJ,EAAS,YAAOiC,IAGZE,EAAc,SAACF,EAASjB,EAAOd,GACnC,IAQIe,EAAS,YAAOgB,GAMpB,OALAhB,EAAUyB,KATM,CACd3D,GAAI,GACJC,MAAO,GACPC,OAAQ,GACRH,MAAO,GACPgB,OAAQ,CAAEC,KAAM,KAIQ,EAAGkB,EAAUiB,QAKhCjB,GAeM0B,EAZI,uCAAG,WAAOzC,EAAMC,EAAQa,GAArB,eAAAZ,EAAA,sEAEEH,EAAUC,EAAMC,GAFlB,cAEhByC,EAFgB,gBAKP9B,EAAa8B,EAAW5B,EAAOd,GALxB,mFAAH,0D,gBChBb2C,EAAU,SAACnE,GAAD,OACd,yBAAKJ,aAAW,aAAaD,UAAU,WACpCK,EAAMgC,MAAMA,MAAZ,yCAAgD,gDAChDhC,EAAMgC,MAAMoC,KAAOxD,QAAQC,IAAIb,EAAMgC,MAAMoC,MAAQ,OAIlDC,EAAW,SAACrE,GAAD,OACf,yBAAKJ,aAAW,kBAAkBD,UAAU,kBAC1C,yBAAKA,UAAU,YACb,4BAAQA,UAAU,SAASgB,QAASX,EAAMsE,WAAWC,U,GAAY,IAC/D,yBACEC,IAAI,aACJ9D,MAAO,CAAE+D,UAAU,kBACnBC,IAAKC,OAIT,yBACE/E,aAAW,eACXD,UAAU,yBACVgB,QAASX,EAAM4E,YAEd5E,EAAM6E,KAAKvC,OAEd,yBACE1C,aAAW,cACXD,UAAU,yBACVgB,QAASX,EAAM8E,WAEd9E,EAAM6E,KAAKrD,MAGd,4BAAQ7B,UAAU,SAASgB,QAASX,EAAMsE,WAAWC,U,EAAW,IAC9D,yBAAKC,IAAI,YAAYE,IAAKC,QAG9B,yBACE/E,aAAW,oDACXD,UAAU,eAEV,yBAAKA,UAAU,gBAAf,WACA,yBAAKA,UAAU,wBAAf,mBAKSoF,EAjLG,WAAO,IAAD,EACMC,mBAAS,CAAC1D,IADhB,mBACf2D,EADe,KACPC,EADO,OAEEF,mBAAS,CAAE1C,MAAO,OAAQd,KAAM,OAFlC,mBAEfqD,EAFe,KAETM,EAFS,OAGeH,oBAAS,GAHxB,mBAGfI,EAHe,KAGJC,EAHI,OAIWL,mBAAS,CAAEhD,OAAO,EAAOoC,KAAM,KAJ1C,mBAIfkB,EAJe,KAINC,EAJM,KAMtBC,qBAAU,YACR,uCAAC,sBAAA9D,EAAA,6DACC2D,GAAgB,GAChBE,EAAc,EAAC,IACf3E,QAAQC,IAAR,gBAAqBgE,EAAKrD,KAA1B,uBAA6CqD,EAAKvC,QAHnD,kBAKS2B,EACJY,EAAKrD,KACLiE,EAAiBZ,EAAKvC,OACtBuC,EAAKvC,OARV,cAUG1B,QAAQC,IAAI,0BAVf,SAWSqE,GAAU,SAACD,GAAD,OAAmB,YAAO3D,MAX7C,yDAaGiE,EAAc,CAAEvD,OAAO,EAAMoC,KAAK,EAAD,KAbpC,QAgBCsB,SAASpF,MAAT,uBAAiCuE,EAAKvC,MAAtC,YAA+CuC,EAAKrD,MACpD6D,GAAgB,GAjBjB,0DAAD,yDAmBC,CAACR,IAEJ,IAAMY,EAAmB,SAACnD,GAUxB,MARc,YAAVA,GAAiC,aAAVA,EAChB,SACU,UAAVA,GAA+B,UAAVA,GAA+B,QAAVA,EAC1C,SACU,SAAVA,GAA8B,SAAVA,GAA8B,WAAVA,EACxC,SACK,QAsElB,OACE,0BAAM3C,UAAU,aACd,kBAAC,EAAD,CACEiF,WA3Ca,WACjB,IAAItC,EA1BiB,SAAjBqD,IACJ,IAeIC,EAfS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGkBC,KAAKC,KAAqB,GAAhBD,KAAKE,WAMnC,OAJIH,IAAWf,EAAKvC,QAClBsD,EAASD,KAGJC,EAIKD,GAEZR,EAAQ,2BAAKN,GAAN,IAAYvC,WACnB1B,QAAQC,IAAI,oBAAqB4E,EAAiBZ,EAAKvC,SAwCnDwC,UArCY,SAACkB,GACjBb,EAAQ,2BAAKN,GAAN,IAAYrD,KAAMqE,KAAKC,KAAqB,GAAhBD,KAAKE,UAAiB,SAqCrDlB,KAAMA,EACNP,WAnCa,SAAC2B,GAClB,IAAIC,EAAS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEFtF,QAAQC,IAAI,wBAAyBgE,EAAKvC,MAAOuC,EAAKrD,MAEnC,YAAfqD,EAAKvC,OAAuB2D,EAAY,EAC1Cd,EAAQ,CAAE7C,MAAO,WAAYd,KAAMqD,EAAKrD,KAAO,IACvB,aAAfqD,EAAKvC,OAAwB2D,EAAY,EAClDd,EAAQ,CAAE7C,MAAO,UAAWd,KAAMqD,EAAKrD,KAAO,IAE9C2D,EAAQ,2BACHN,GADE,IAELvC,MAAO4D,EAAOA,EAAOC,WAAU,SAACH,GAAD,OAAOA,IAAMnB,EAAKvC,SAAS2D,SAa5D,yBAAKtG,UAAS,QACXyF,GAAaE,EAAQtD,MAAQ,kBAAC,EAAD,CAASA,MAAOsD,IAAc,KAC3DL,EAAOvC,KAAI,SAACF,EAAI4D,GAAL,OACV,kBAAC,EAAD,CACE/F,IAAK+F,EAAI,GAAGlF,WAAWC,SAAS,EAAG,KACnCkF,IAAKD,EACLjG,IAAK8E,EAAOmB,GACZ3F,IAAK0C,EAAkB0B,EAAKvC,MAAOuC,EAAKrD,MACxCP,OAAO,IAAImC,MAAOE,kBC7FfgD,G,MAhCA,WACb,OACE,4BAAQ3G,UAAU,UAChB,yBACEC,aAAW,gDACXD,UAAU,eAFZ,wBAMA,yBAAKA,UAAU,cACb,uBAAGC,aAAW,8BAA8BD,UAAU,UAAtD,OAGA,uBACEC,aAAW,iBACX2G,KAAK,qCACLC,OAAO,SACPC,IAAI,uBAEJ,yBACEjC,IAAI,cACJ5E,aAAW,cACX8G,OAAO,KACPC,MAAM,KACNjC,IAAI,4DCRDkC,G,MAZH,WACR,OACI,yBAAKjH,UAAU,OACX,yBAAKA,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCDIkH,QACa,cAA7B/F,OAAOgG,SAASC,UAEa,UAA7BjG,OAAOgG,SAASC,UAEhBjG,OAAOgG,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB3F,MAAK,SAAA4F,GACFA,EAAaC,gBAEhBC,OAAM,SAAA1F,GACHpB,QAAQoB,MAAMA,EAAM2F,c","file":"static/js/main.a35436a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.cd7cff82.svg\";","import React from \"react\";\nimport \"./header.css\";\n\nconst Header = () => {\n  return (\n    <header className=\"Header\">\n      <div aria-label=\"Site logo\" className=\"Logo\">\n        MC\n      </div>\n      <div className=\"Menu\">\n        <div aria-label=\"Link to update feed\" className=\"Menu\">\n          What's new\n        </div>\n        <div aria-label=\"Link to about page\" className=\"Menu\">\n          About\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Day = React.memo((props) => {\n  const handleClicked = () => {\n    console.log(\"day is clicked!\");\n    if (props.ani.id) {\n      window.open(`https://myanimelist.net/anime/${props.ani.id}`, \"_blank\");\n    }\n  };\n\n  let styledDay = {\n    background: `linear-gradient(180deg, rgba(0,0,0,0) 0%, #0E0E0E 105%), url(${\n      props.ani ? props.ani.image : \"\"\n    }) center center no-repeat`,\n  };\n\n  return (\n    <div\n      aria-label={\n        props.ani.id\n          ? `Anime is ${props.ani.title}, their airing date is ${props.ani.airing}`\n          : \"\"\n      }\n      className={`day ${!props.ani.day ? \"filledDay\" : \"\"} ${\n        props.id > props.ldm ? \"hidden\" : \"\"\n      }`}\n      style={props.ani.image ? styledDay : null}\n      onClick={handleClicked}\n    >\n      <div\n        className={`dayNum ${\n          parseInt(props.id) === props.today ? \"today\" : \"\"\n        }`}\n      >\n        {props.ani.day\n          ? props.ani.day.toString().padStart(2, \"0\")\n          : props.id <= props.ldm\n          ? props.id\n          : \"\"}\n      </div>\n      <div>\n        <div className=\"dayTitle\">\n          {props.ani\n            ? props.ani.title\n            : \"男子高校生で売れっ子ライトノベル作家をしているけれど、年下のクラスメイトで声優の女の子に首を絞められている! The Animation 2nd Season\"}\n        </div>\n        <div className=\"daySubtitle\">\n          {props.ani.studio\n            ? props.ani.studio.name\n            : \"Studio is currently unknown\"}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Day;\n","//const API = \"https://private-anon-98ba329006-jikan.apiary-proxy.com/v3/\";\nconst API = \"https://thingproxy.freeboard.io/fetch/https://api.jikan.moe/v3/\";\n\nexport let titlelist = [];\n\nconst getSeason = async (year, season) => {\n  const response = await fetch(`${API}season/${year}/${season}/`)\n    //const response = await fetch(`${API}season/`)\n    .then((res) => {\n      //console.log(res);\n      if (res.status === 429) {\n        console.log(\"Too many requests!\");\n      }\n      //console.log('response is ', res);\n      if (!res.ok) {\n        console.error(\"Could not fetch!\");\n      }\n      return res;\n    });\n  //.catch(error => console.error('error blin'));\n\n  const resJSON = await response.json();\n  return resJSON[\"anime\"];\n};\n/*let images = [];*/\n\n/*const imageSaver = (image, el) => {\n    images[el] = image;\n    return images[el];\n}*/\n/*export const getLargeImages = async () => {\n    console.log('getLargeImages started!')\n    let animelist = [...titlelist];\n    for (const el in animelist) {\n        await sleep(500).then(async () => {\n            getAnimeImage(animelist[el].id)\n                .then(image => {\n                    animelist[el]['image'] = imageSaver(image, el);\n                    return image;\n                });\n        });\n    };\n    console.log('animelist in getLargeImages is ', animelist);\n    titlelist = animelist;\n    console.log(JSON.stringify(animelist) === JSON.stringify(titlelist));\n    console.log('getLargeImages finished!')\n    return titlelist;\n}*/\n/*const getAnimeImage = async (mal_id) => {\n    const image_url = await fetch( `${API}anime/${mal_id}/pictures/`)\n        .then(res => {\n            return res.json();\n        });\n    const image = image_url.pictures[0]['large'];\n    //console.log(image);\n    return image;\n}*/\n\nconst getAnimelist = (anime, month, year) => {\n  let animelist = [];\n  animelist.push(anime.map((el) => el));\n  animelist = animelist[0];\n\n  for (const el in animelist) {\n    animelist[el] = {\n      id: animelist[el].mal_id,\n      title: animelist[el].title,\n      airing: animelist[el].airing_start,\n      image: animelist[el].image_url,\n      studio: animelist[el].producers[0],\n    };\n  }\n  titlelist = animelist;\n  sortAnime();\n  getAnimeByMonth(month, year);\n\n  //console.log(\"getAnimelist is \", titlelist);\n  return true;\n};\n\nconst sortAnime = () => {\n  //console.log('sort has started!', titlelist);\n  let animelist = [...titlelist];\n\n  animelist.sort((a, b) => {\n    if (a.airing > b.airing) {\n      return 1;\n    } else if (a.airing < b.airing) {\n      return -1;\n    } else return 0;\n  });\n\n  titlelist = [...animelist];\n  //console.log('sort is finished!', titlelist);\n};\n\nexport const getLastDayOfMonth = (month, year) => {\n  return new Date(\n    year,\n    new Date(`01 ${month} ${year}`).getMonth() + 1,\n    0\n  ).getDate();\n};\n\nconst getAnimeByMonth = (month, year) => {\n  let animelist = [...titlelist];\n  let newlist = [];\n  //newlist.length = getLastDayOfMonth(month, year);\n  newlist.length = 35;\n  newlist = fillNewList(newlist, month, year);\n  //console.log(\"newlist is\", newlist);\n\n  let firstDayOfMonth = new Date(`01 ${month} ${year}`).getTime();\n  let lastDayOfMonth = new Date(\n    `${getLastDayOfMonth(month, year)} ${month} ${year}`\n  ).getTime();\n\n  animelist.forEach((a, index) => {\n    let currentDate = new Date(a.airing).getTime();\n\n    if (currentDate <= lastDayOfMonth && currentDate >= firstDayOfMonth) {\n      //console.log(firstDayOfMonth, currentDate, lastDayOfMonth);\n      //console.log(a, \"a.airing is true\");\n      a.day = new Date(a.airing).getDate() + 1;\n      newlist[a.day - 1] = a;\n      return true;\n    }\n    return false;\n  });\n\n  //console.log(\"animelist after gabm is\", newlist);\n  titlelist = [...newlist];\n};\n\nconst fillNewList = (newlist, month, year) => {\n  let dumbTitle = {\n    id: \"\",\n    title: \"\",\n    airing: \"\",\n    image: \"\",\n    studio: { name: \"\" },\n  };\n\n  let animelist = [...newlist];\n  animelist.fill(dumbTitle, 0, animelist.length);\n  /*console.log(\n    \"Filled list is \",\n    animelist\n  );*/\n  return animelist;\n};\n\nconst animeScissors = async (year, season, month) => {\n  //console.log(`${API}season/${year}/${season}/`);\n  let animeJSON = await getSeason(year, season);\n  //console.log(animeJSON);\n  //let result = await getAnimelist(animeJSON);\n  return await getAnimelist(animeJSON, month, year);\n};\n\n/*const sleep = (milliseconds) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};*/\n\nexport default animeScissors;\n","import React, { useEffect, useState } from \"react\";\nimport \"./container.css\";\nimport Day from \"./day\";\nimport animeScissors, { getLastDayOfMonth, titlelist } from \"../api/getanime\";\nimport arrow from \"../graphics/arrow.svg\";\n\nconst Container = () => {\n  const [titles, setTitles] = useState([titlelist]);\n  const [date, setDate] = useState({ month: \"July\", year: 2020 });\n  const [isLoading, setLoadingState] = useState(false);\n  const [isError, setErrorState] = useState({ error: false, code: \"\" });\n\n  useEffect(() => {\n    (async function xd() {\n      setLoadingState(true);\n      setErrorState([false]);\n      console.log(`year: ${date.year} and month: ${date.month}`);\n      try {\n        await animeScissors(\n          date.year,\n          getSeasonByMonth(date.month),\n          date.month\n        );\n        console.log(\"titlelist had updated!\");\n        await setTitles((titles) => (titles = [...titlelist]));\n      } catch (error) {\n        setErrorState({ error: true, code: error });\n      }\n\n      document.title = `malendar for ${date.month} ${date.year}`;\n      setLoadingState(false);\n    })();\n  }, [date]);\n\n  const getSeasonByMonth = (month) => {\n    let season = \"\";\n    if (month === \"January\" || month === \"February\") {\n      season = \"winter\";\n    } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      season = \"spring\";\n    } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      season = \"summer\";\n    } else season = \"fall\";\n\n    return season;\n  };\n\n  const getRandomMonth = () => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    let rMonth = months[Math.ceil(Math.random() * 11)];\n\n    if (rMonth === date.month) {\n      rMonth = getRandomMonth();\n    }\n\n    return rMonth;\n  };\n\n  const monthClick = () => {\n    let month = getRandomMonth();\n\n    setDate({ ...date, month });\n    console.log(\"Current season is\", getSeasonByMonth(date.month));\n  };\n\n  const yearClick = (e) => {\n    setDate({ ...date, year: Math.ceil(Math.random() * 10) + 2010 });\n  };\n\n  const changeDate = (direction) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    console.log(\"hey there what about \", date.month, date.year);\n\n    if (date.month === \"January\" && direction < 0) {\n      setDate({ month: \"December\", year: date.year - 1 });\n    } else if (date.month === \"December\" && direction > 0) {\n      setDate({ month: \"January\", year: date.year + 1 });\n    } else {\n      setDate({\n        ...date,\n        month: months[months.findIndex((e) => e === date.month) + direction],\n      });\n    }\n  };\n\n  return (\n    <main className=\"Container\">\n      <HeadMenu\n        monthClick={monthClick}\n        yearClick={yearClick}\n        date={date}\n        changeDate={changeDate}\n      />\n      <div className={`Days`}>\n        {isLoading || isError.error ? <Loading error={isError} /> : null}\n        {titles.map((el, i) => (\n          <Day\n            id={(i + 1).toString().padStart(2, \"0\")}\n            key={i}\n            ani={titles[i]}\n            ldm={getLastDayOfMonth(date.month, date.year)}\n            today={new Date().getDate()}\n          />\n        ))}\n      </div>\n    </main>\n  );\n};\n\nconst Loading = (props) => (\n  <div aria-label=\"loading...\" className=\"loading\">\n    {props.error.error ? `Error has occurred(╥﹏╥)` : \"(っ◔◡◔)っ 🍥\"}\n    {props.error.code ? console.log(props.error.code) : null}\n  </div>\n);\n\nconst HeadMenu = (props) => (\n  <div aria-label=\"head navigation\" className=\"Head-Container\">\n    <div className=\"Date-nav\">\n      <button className=\"button\" onClick={props.changeDate.bind(this, -1)}>\n        <img\n          alt=\"back-arrow\"\n          style={{ transform: `rotate(180deg)` }}\n          src={arrow}\n        />\n      </button>\n\n      <div\n        aria-label=\"select month\"\n        className=\"dateMonth padding-left\"\n        onClick={props.monthClick}\n      >\n        {props.date.month}\n      </div>\n      <div\n        aria-label=\"select year\"\n        className=\"dateYear padding-right\"\n        onClick={props.yearClick}\n      >\n        {props.date.year}\n      </div>\n\n      <button className=\"button\" onClick={props.changeDate.bind(this, 1)}>\n        <img alt=\"fur-arrow\" src={arrow} />\n      </button>\n    </div>\n    <div\n      aria-label=\"select if you want to see ongoing or new releases\"\n      className=\"Release-nav\"\n    >\n      <div className=\"padding-left\">Ongoing</div>\n      <div className=\"padding-right active\">New releases</div>\n    </div>\n  </div>\n);\n\nexport default Container;\n","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"Footer\">\n      <div\n        aria-label=\"Author of site is Alex Shermann, made in 2020\"\n        className=\"footerRight\"\n      >\n        Alex Shermann [2020]\n      </div>\n      <div className=\"footerLeft\">\n        <p aria-label=\"Site is recommended for 18+\" className=\"marker\">\n          18+\n        </p>\n        <a\n          aria-label=\"Link to github\"\n          href=\"https://github.com/shrmnn/malendar\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            alt=\"github link\"\n            aria-label=\"github link\"\n            height=\"32\"\n            width=\"32\"\n            src=\"https://unpkg.com/simple-icons@v2/icons/github.svg\"\n          />\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from \"./Components/header\";\nimport Container from \"./Components/container\";\nimport Footer from \"./Components/footer\";\n\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <div className='Content'>\n                <Header/>\n                <Container/>\n                <Footer/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}