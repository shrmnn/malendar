{"version":3,"sources":["graphics/arrow.svg","graphics/moon.svg","Components/header.js","api/Date.js","api/getanime.js","Components/loading.js","Components/headMenu.js","Components/day.js","Components/multititle.js","Components/dayContainer.js","Components/container.js","api/useLocalState.js","Components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","aria-label","title","month","months","getRandomMonth","date","rMonth","Math","ceil","random","getSeasonByMonth","getCurrentMonth","Date","getMonth","getLastDayOfMonth","cmonth","cyear","convertToLocale","getUTCMonth","getDate","locale","time","toLocaleString","convertToJapanTime","timeZone","year","getCurrentYear","getFullYear","getRandomYear","rYear","titlelist","getSeason","season","a","fetch","process","then","res","status","console","log","ok","error","response","json","resJSON","getAnimelist","anime","animelist","el","push","map","id","mal_id","airing","airing_start","image","image_url","split","studio","producers","members","titleArray","getAnimeByMonth","sortBy","sort","b","sortAnime","reverse","newlist","length","fillNewList","firstDayOfMonth","getTime","lastDayOfMonth","forEach","index","currentDate","day","fill","name","multi","animeScissors","animeJSON","Loading","props","code","HeadMenu","tabIndex","onClick","changeDate","bind","alt","style","transform","src","arrow","monthClick","yearClick","Day","React","memo","ani","styledDay","background","window","open","rel","itemType","itemScope","parseInt","today","dateTime","toString","padStart","e","stopPropagation","changeMV","Multititle","display","MV","titles","i","key","DayContainer","useState","multititleState","setMultititleState","currentDay","setCurrentDay","Fragment","arraylist","Container","setTitles","setDate","isLoading","setLoadingState","isError","setErrorState","useEffect","document","body","classList","add","remove","nMonth","nYear","direction","findIndex","useLocalState","defaultValue","stickyValue","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify","Footer","toggledTheme","toggleTheme","height","width","moon","href","target","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4bcb0379.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.2c511b88.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.d58b953a.svg\";","import React from \"react\";\nimport \"./header.css\";\n\nconst Header = () => {\n    return (\n        <header className=\"Header\">\n            <div aria-label=\"Site logo\" className=\"Logo\">\n                <div className=\"Header__Logo--M\">M</div>\n                C\n            </div>\n            <div className=\"Menu\">\n                <div aria-label=\"Link to update feed\" className=\"Menu\" title=\"WIP\">\n                    What's new\n                </div>\n                <div aria-label=\"Link to about page\" className=\"Menu\" title=\"WIP\">\n                    About\n                </div>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","class Month {\n  months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  getRandomMonth = (date) => {\n    let rMonth = this.months[Math.ceil(Math.random() * 11)];\n\n    if (rMonth === date.month) {\n      rMonth = this.getRandomMonth(date);\n    }\n\n    return rMonth;\n  };\n\n  getSeasonByMonth = (month) => {\n    let season = \"\";\n    if (month === \"January\" || month === \"February\" || month === \"March\") {\n      season = \"winter\";\n    } else if (month === \"April\" || month === \"May\" || month === \"June\") {\n      season = \"spring\";\n    } else if (\n      month === \"July\" ||\n      month === \"August\" ||\n      month === \"September\"\n    ) {\n      season = \"summer\";\n    } else season = \"fall\";\n\n    return season;\n  };\n\n  getCurrentMonth = () => {\n    return this.months[new Date().getMonth()];\n  };\n\n  getLastDayOfMonth = (cmonth, cyear) => {\n    return new Date(\n      cyear,\n      this.convertToLocale(\n        \"en-US\",\n        new Date(`${cmonth} 01 ${cyear}`)\n      ).getUTCMonth(),\n      0\n    ).getDate();\n  };\n\n  convertToLocale = (locale, time) => {\n    return new Date(new Date(time).toLocaleString(locale));\n  };\n\n  convertToJapanTime = (time) => {\n    return new Date(time).toLocaleString(\"en-US\", { timeZone: \"Japan\" });\n  };\n}\n\nclass Year {\n  getCurrentYear = () => {\n    return new Date().getFullYear();\n  };\n\n  getRandomYear = (date) => {\n    let rYear = Math.ceil(Math.random() * 15) + 2000;\n\n    if (rYear === date.year) {\n      rYear = this.getRandomYear(date);\n    }\n\n    return rYear;\n  };\n}\nexport const month = new Month();\nexport const year = new Year();\n","import { month } from \"./Date\";\n\n//const API = \"https://api.jikan.moe/v3/\";\nconst API = process.env.REACT_APP_API;\nconst PROXY = \"\";\n\nexport let titlelist = [];\n\nconst getSeason = async (cyear, season) => {\n  const response = await fetch(`${PROXY}${API}season/${cyear}/${season}/`)\n    //const response = await fetch(`${API}season/`)\n    .then((res) => {\n      //console.log(res);\n      if (res.status === 429) {\n        console.log(\"Too many requests!\");\n      }\n      //console.log('response is ', res);\n      if (!res.ok) {\n        console.error(\"Could not fetch!\");\n      }\n      return res;\n    });\n  //console.log(`Fetching ${PROXY}${API}season/${year}/${season}/`);\n\n  const resJSON = await response.json();\n  return resJSON[\"anime\"];\n};\n\nconst getAnimelist = (anime, cmonth, cyear) => {\n  let animelist = [];\n  animelist.push(anime.map((el) => el));\n  animelist = animelist[0];\n\n  for (const el in animelist) {\n    animelist[el] = {\n      id: animelist[el].mal_id,\n      title: animelist[el].title,\n      airing: month.convertToJapanTime(animelist[el].airing_start),\n      image: animelist[el].image_url.split(\".jpg\")[0] + \"l.jpg\",\n      studio: animelist[el].producers[0],\n      members: animelist[el].members,\n      titleArray: [],\n    };\n  }\n  titlelist = animelist;\n  getAnimeByMonth(cmonth, cyear);\n\n  //console.log(\"getAnimelist is \", titlelist);\n  return true;\n};\n\nconst sortAnime = (sortBy) => {\n  //console.log('sort has started!', titlelist);\n  let animelist = [...titlelist];\n\n  if (sortBy === 0) {\n    animelist.sort((a, b) => {\n      if (a.title > b.title) {\n        return 1;\n      } else if (a.title < b.title) {\n        return -1;\n      } else return 0;\n    });\n  } else if (sortBy === 1) {\n    animelist.sort((a, b) => {\n      if (a.members > b.members) {\n        return 1;\n      } else if (a.members < b.members) {\n        return -1;\n      } else return 0;\n    });\n  } else {\n    animelist.sort((a, b) => {\n      if (a.airing > b.airing) {\n        return 1;\n      } else if (a.airing < b.airing) {\n        return -1;\n      } else return 0;\n    });\n  }\n\n  titlelist = [...animelist];\n  //console.log(\"sort is finished!\", titlelist);\n};\n\nconst getAnimeByMonth = (cmonth, cyear) => {\n  sortAnime(1);\n  let animelist = [...titlelist].reverse();\n  let newlist = [];\n  newlist.length = month.getLastDayOfMonth(cmonth, cyear);\n  newlist = fillNewList(newlist, cmonth, cyear);\n\n  let firstDayOfMonth = new Date(`01 ${cmonth} ${cyear}`).getTime();\n  let lastDayOfMonth = new Date(\n    `${month.getLastDayOfMonth(cmonth, cyear)} ${cmonth} ${cyear}`\n  ).getTime();\n\n  //console.log(firstDayOfMonth, lastDayOfMonth);\n\n  animelist.forEach((a, index) => {\n    let currentDate = new Date(a.airing).getTime();\n\n    if (currentDate <= lastDayOfMonth && currentDate >= firstDayOfMonth) {\n      //console.log(firstDayOfMonth, currentDate, lastDayOfMonth);\n      //console.log(a, \"a.airing is true\");\n      a.day = new Date(a.airing).getDate();\n\n      if (newlist[a.day - 1].id) {\n        //console.log(\"temporal newlist is\", newlist);\n        newlist[a.day - 1][\"multi\"] = true;\n        newlist[a.day - 1].titleArray.push(a);\n      } else {\n        newlist[a.day - 1] = a;\n      }\n\n      return true;\n    }\n    return false;\n  });\n\n  //console.log(\"animelist after gabm is\", newlist);\n  titlelist = [...newlist];\n};\n\nconst fillNewList = (newlist) => {\n  let dumbTitle = {\n    id: \"\",\n    title: \"\",\n    airing: \"\",\n    image: \"\",\n    studio: { name: \"\" },\n    multi: false,\n    titleArray: [],\n  };\n\n  let animelist = [...newlist];\n  animelist.fill(dumbTitle, 0, animelist.length);\n  /*console.log(\n      \"Filled list is \",\n      animelist\n    );*/\n  return animelist;\n};\n\nconst animeScissors = async (cyear, season, cmonth) => {\n  //console.log(`${API}season/${year}/${season}/`);\n  let animeJSON = await getSeason(cyear, season);\n  //console.log(animeJSON);\n  //let result = await getAnimelist(animeJSON);\n  return await getAnimelist(animeJSON, cmonth, cyear);\n};\n\n/*const sleep = (milliseconds) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};*/\n\nexport default animeScissors;\n","import React from \"react\";\n\nconst Loading = (props) => (\n  <div aria-label=\"loading...\" className=\"Loading\">\n    {props.error.error ? `Error has occurred(╥﹏╥)` : `(っ◔◡◔)っ 🍜`}\n    {props.error.code ? console.log(props.error.code) : null}\n  </div>\n);\n\nexport default Loading;\n","import arrow from \"../graphics/arrow.svg\";\nimport React from \"react\";\n\nconst HeadMenu = (props) => (\n  <div aria-label=\"head navigation\" className=\"HeadContainer\">\n    <div className=\"HeadContainer__DateNav\">\n      <button\n        tabIndex=\"0\"\n        className=\"HeadContainer__Button\"\n        onClick={props.changeDate.bind(this, -1)}\n        title=\"Previous month\"\n      >\n        <img\n          alt=\"back-arrow\"\n          style={{ transform: `rotate(180deg)` }}\n          src={arrow}\n        />\n      </button>\n\n      <div\n        aria-label=\"select month\"\n        className=\"HeadContainer__DateNav_DateMonth\"\n        onClick={props.monthClick}\n        title=\"Click for random month\"\n      >\n        {props.date.month}\n      </div>\n      <div\n        aria-label=\"select year\"\n        className=\"HeadContainer__DateNav_DateYear\"\n        onClick={props.yearClick}\n        title=\"Click for random year\"\n      >\n        {props.date.year}\n      </div>\n\n      <button\n        tabIndex=\"0\"\n        className=\"HeadContainer__Button\"\n        onClick={props.changeDate.bind(this, 1)}\n        title=\"Next month\"\n      >\n        <img alt=\"fur-arrow\" src={arrow} />\n      </button>\n    </div>\n    <div\n      aria-label=\"select if you want to see ongoing or new releases\"\n      className=\"HeadContainer__ReleaseNav\"\n    >\n      <div className=\"padding-left\">Ongoing</div>\n      <div className=\"padding-right HeadContainer__ReleaseNav--active\">\n        New releases\n      </div>\n    </div>\n  </div>\n);\n\nexport default HeadMenu;\n","import React from \"react\";\n\nconst Day = React.memo((props) => {\n  const ani = props.ani;\n  const [month, year] = props.month;\n\n  const handleClicked = () => {\n    if (ani.id) {\n      window.open(`https://myanimelist.net/anime/${ani.id}`, \"_blank\");\n    }\n  };\n\n  const multititleClicked = (e) => {\n    e.stopPropagation();\n    props.changeMV(ani.day - 1);\n  };\n\n  let styledDay = {\n    background: `linear-gradient(180deg, rgba(0,0,0,0) 0%, #0E0E0E 105%), url(${\n      ani ? ani.image : \"\"\n    }) center center / cover no-repeat`,\n  };\n\n  return (\n    <div\n      aria-label={\n        ani.id\n          ? `[${ani.id}] Anime is ${ani.title}, their airing date is ${ani.airing}`\n          : \"\"\n      }\n      className={`Days__Day ${!ani.day ? \"Days__Day--filledDay\" : \"\"} ${\n        props.id >\n        month.getLastDayOfMonth(year.getCurrentYear(), month.getCurrentMonth())\n          ? \"--hidden\"\n          : \"\"\n      }`}\n      style={ani.image ? styledDay : null}\n      onClick={handleClicked}\n      rel=\"nofollow noreferer\"\n      itemType=\"Anime\"\n      itemScope\n    >\n      <div className=\"Days__Day_Notificators\">\n        <time\n          className={`Days__Day_DayNum ${\n            parseInt(props.id) === props.today ? \"Days__Day_DayNum--mToday\" : \"\"\n          }`}\n          dateTime={ani.airing}\n          itemType=\"startDate\"\n        >\n          {ani.day ? ani.day.toString().padStart(2, \"0\") : props.id}\n        </time>\n        {ani.multi ? (\n          <div\n            itemType=\"alsoThisDay\"\n            className=\"Days__Day_DayNum Days__Day_DayNum--MultititleNotification\"\n            onClick={multititleClicked}\n            title={`Also ${ani.titleArray.length} anime this day`}\n          >\n            {\"+\" + ani.titleArray.length}\n          </div>\n        ) : null}\n      </div>\n\n      <div className=\"Days__Day_CardTitle\">\n        <div className=\"Days__Day_CardTitle--DayTitle\" itemType=\"name\">\n          {ani\n            ? ani.title\n            : \"男子高校生で売れっ子ライトノベル作家をしているけれど、年下のクラスメイトで声優の女の子に首を絞められている! The Animation 2nd Season\"}\n        </div>\n        <div\n          className=\"Days__Day_CardTitle--DaySubtitle\"\n          itemType=\"productionCompany\"\n        >\n          {ani.studio ? ani.studio.name : \"Studio is currently unknown\"}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Day;\n","import React from \"react\";\nimport Day from \"./day\";\nimport { month, year } from \"../api/Date\";\n\nconst Multititle = (props) => {\n  return (\n    <div\n      className=\"MultiDay\"\n      style={{\n        display: `${props.MV ? \"grid\" : \"none\"}`,\n      }}\n    >\n      <h1 className=\"MultiDay__Header\">\n        More for {new Date(props.date).getDate()}{\" \"}\n        {month.months[new Date(props.date).getMonth()] + \" \"}\n        {new Date(props.date).getFullYear()}\n      </h1>\n      <div className=\"MultiDay__Titles\">\n        {props.titles.map((el, i) => (\n          <div className=\"Days__DayContainer\" key={i}>\n            <Day\n              id={(i + 1).toString().padStart(2, \"0\")}\n              key={props.titles.id}\n              ani={props.titles[i]}\n              month={[month, year]}\n              today={new Date().getDate()}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Multititle;\n","import React, { useState } from \"react\";\nimport Day from \"./day\";\nimport { month, year } from \"../api/Date\";\nimport Multititle from \"./multititle\";\n\nconst DayContainer = React.memo((props) => {\n  const [multititleState, setMultititleState] = useState([]);\n  const [currentDay, setCurrentDay] = useState(-1);\n\n  // multititleState:\n  // state: boolean\n  // key of array is a day of Days (for like m[15] = 16 of Days\n\n  const changeState = (day) => {\n    let arraylist = multititleState;\n    arraylist.length = 31;\n    arraylist.fill(false);\n    if (day !== currentDay) {\n      arraylist[day] = true;\n      setCurrentDay(day);\n    } else {\n      arraylist[day] = false;\n      setCurrentDay(-1);\n    }\n\n    setMultititleState((multititleState) => (multititleState = [...arraylist]));\n    //console.log(\"ну собсна поменялось все лол\\n\", multititleState);\n  };\n\n  const { i, titles } = props;\n\n  return (\n    <React.Fragment>\n      <div\n        className={`Days__DayContainer ${\n          !titles[i].day ? \"Days__Day--filledDay\" : \"\"\n        }`}\n        key={\"Container__\" + i}\n      >\n        <Day\n          id={(i + 1).toString().padStart(2, \"0\")}\n          key={titles[i].id}\n          ani={titles[i]}\n          month={[month, year]}\n          today={new Date().getDate()}\n          changeMV={changeState}\n        />\n      </div>\n      {titles[i].multi ? (\n        <Multititle\n          date={titles[i].airing}\n          titles={titles[i].titleArray}\n          MV={multititleState[titles[i].day - 1]}\n          key={titles[i].id + multititleState[titles[i].day - 1]}\n        />\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n});\n\nexport default DayContainer;\n","import React, { useEffect, useState } from \"react\";\nimport \"./grid_container.css\";\nimport animeScissors, { titlelist } from \"../api/getanime\";\nimport { month, year } from \"../api/Date\";\nimport Loading from \"./loading\";\nimport HeadMenu from \"./headMenu\";\nimport DayContainer from \"./dayContainer\";\n\nconst Container = () => {\n  const [titles, setTitles] = useState([titlelist]);\n  const [date, setDate] = useState({\n    month: month.getCurrentMonth(),\n    year: year.getCurrentYear(),\n  });\n  const [isLoading, setLoadingState] = useState(false);\n  const [isError, setErrorState] = useState({ error: false, code: \"\" });\n\n  useEffect(() => {\n    (async function xd() {\n      setLoadingState(true);\n      document.body.classList.add(\"--overflow\");\n      setErrorState({ error: false, code: \"\" });\n\n      try {\n        await animeScissors(\n          date.year,\n          month.getSeasonByMonth(date.month),\n          date.month\n        );\n        console.log(\"titlelist had updated!\");\n        await setTitles((titles) => (titles = [...titlelist]));\n      } catch (error) {\n        setErrorState({ error: true, code: error });\n      }\n\n      document.title = `malendar for ${date.month} ${date.year}`;\n      setLoadingState(false);\n      document.body.classList.remove(\"--overflow\");\n    })();\n  }, [date]);\n\n  const monthClick = () => {\n    let nMonth = month.getRandomMonth(date);\n    setDate({ ...date, month: nMonth });\n    console.log(\"Current season is\", month.getSeasonByMonth(date.month));\n  };\n\n  const yearClick = () => {\n    let nYear = year.getRandomYear(date);\n    setDate({ ...date, year: nYear });\n  };\n\n  const changeDate = (direction) => {\n    console.log(\"hey there what about \", date.month, date.year);\n\n    if (date.month === \"January\" && direction < 0) {\n      setDate({ month: \"December\", year: date.year - 1 });\n    } else if (date.month === \"December\" && direction > 0) {\n      setDate({ month: \"January\", year: date.year + 1 });\n    } else {\n      setDate({\n        ...date,\n        month:\n          month.months[\n            month.months.findIndex((e) => e === date.month) + direction\n          ],\n      });\n    }\n  };\n\n  return (\n    <main className=\"Container\">\n      <HeadMenu\n        monthClick={monthClick}\n        yearClick={yearClick}\n        date={date}\n        changeDate={changeDate}\n      />\n      <div className={`Days`}>\n        {isLoading || isError.error ? <Loading error={isError} /> : null}\n        {titles.map((el, i) => (\n          <DayContainer i={i} titles={titles} key={\"DayContainer__\" + i} />\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\n\nfunction useLocalState(defaultValue, key) {\n  const [value, setValue] = React.useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\nexport default useLocalState;\n","import React, { useEffect } from \"react\";\nimport useLocalState from \"../api/useLocalState\";\nimport \"./footer.css\";\nimport moon from \"../graphics/moon.svg\";\n\nconst Footer = React.memo(() => {\n  const [toggledTheme, toggleTheme] = useLocalState(false, \"toggled\");\n\n  useEffect(() => {\n    if (toggledTheme) document.body.classList.remove(\"blue\");\n    else document.body.classList.add(\"blue\");\n  }, [toggledTheme]);\n\n  const changeTheme = () => {\n    toggleTheme(!toggledTheme);\n  };\n\n  return (\n    <footer className=\"Footer\">\n      <div\n        aria-label=\"Author of site is Alex Shermann, made in 2020\"\n        className=\"Footer__Right\"\n      >\n        Alex Shermann [2020]\n      </div>\n      <div className=\"Footer__Left\">\n        <p\n          aria-label=\"Site is recommended for 18+\"\n          className=\"marker\"\n          title=\"Site is recommended for 18+\"\n        >\n          18+\n        </p>\n        <img\n          alt=\"change theme\"\n          aria-label=\"change theme\"\n          height=\"32\"\n          width=\"32\"\n          src={moon}\n          onClick={changeTheme}\n          className={toggledTheme ? \"Footer__Left--toggled\" : \"\"}\n        />\n        <a\n          aria-label=\"Link to github\"\n          href=\"https://github.com/shrmnn/malendar\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"GitHub\"\n        >\n          <img\n            alt=\"github link\"\n            aria-label=\"github link\"\n            height=\"32\"\n            width=\"32\"\n            className=\"Footer__Left--github\"\n            src=\"https://unpkg.com/simple-icons@v3/icons/github.svg\"\n          />\n        </a>\n      </div>\n    </footer>\n  );\n});\n\nexport default Footer;\n","import React from \"react\";\nimport Header from \"./Components/header\";\nimport Container from \"./Components/container\";\nimport Footer from \"./Components/footer\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"Content\">\n        <Header />\n        <Container />\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}