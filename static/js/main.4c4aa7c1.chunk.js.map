{"version":3,"sources":["Components/header.js","Components/day.js","api/getanime.js","Components/container.js","Components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Day","props","styledDay","background","ani","image","day","id","ldm","style","onClick","console","log","window","open","toString","padStart","title","studio","name","titlelist","getSeason","year","season","a","fetch","then","res","status","ok","error","response","json","resJSON","getAnimelist","anime","month","animelist","el","push","map","mal_id","airing","airing_start","image_url","producers","sortAnime","getAnimeByMonth","sort","b","getLastDayOfMonth","Date","getMonth","getDate","newlist","length","fillNewList","forEach","index","getTime","fill","animeScissors","animeJSON","Container","useState","titles","setTitles","setMonth","setYear","useEffect","getSeasonByMonth","months","Math","ceil","random","i","key","Footer","href","target","rel","alt","aria-label","height","width","src","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4c4aa7c1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='Header'>\r\n            <div className='Logo'>MC</div>\r\n            <div className='Menu'>\r\n                <div className='Menu'>What's new</div>\r\n                <div className='Menu'>About</div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\n\nconst Day = (props) => {\n  const handleClicked = () => {\n    console.log(\"day is clicked!\");\n    if (props.ani.id) {\n      window.open(`https://myanimelist.net/anime/${props.ani.id}`);\n    }\n  };\n\n  let styledDay = {\n    background: `linear-gradient(180deg, rgba(0,0,0,0) 0%, #0E0E0E 105%), url(${\n      props.ani ? props.ani.image : \"\"\n    }) center center no-repeat`,\n  };\n\n  return (\n    <div\n      className={`day ${!props.ani.day ? \"poshelnahuy\" : \"\"} ${\n        props.id > props.ldm ? \"hidden\" : \"\"\n      }`}\n      style={props.ani.image ? styledDay : null}\n      onClick={handleClicked}\n    >\n      <div className=\"dayNum\">\n        {props.ani.day\n          ? props.ani.day.toString().padStart(2, \"0\")\n          : props.id <= props.ldm\n          ? props.id\n          : \"\"}\n      </div>\n      <div>\n        <div className=\"dayTitle\">\n          {props.ani\n            ? props.ani.title\n            : \"男子高校生で売れっ子ライトノベル作家をしているけれど、年下のクラスメイトで声優の女の子に首を絞められている! The Animation 2nd Season\"}\n        </div>\n        <div className=\"daySubtitle\">\n          {props.ani.studio\n            ? props.ani.studio.name\n            : \"Studio is currently unknown\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Day;\n","//const API = \"https://private-anon-98ba329006-jikan.apiary-proxy.com/v3/\";\nconst API = \"https://api.codetabs.com/v1/proxy?quest=https://api.jikan.moe/v3/\";\n\nexport let titlelist = [];\n\nconst getSeason = async (year, season) => {\n  const response = await fetch(`${API}season/${year}/${season}/`)\n    //const response = await fetch(`${API}season/`)\n    .then((res) => {\n      //console.log(res);\n      if (res.status === 429) {\n        console.log(\"Too many requests!\");\n      }\n      //console.log('response is ', res);\n      if (!res.ok) {\n        console.error(\"Could not fetch!\");\n      }\n      return res;\n    });\n  //.catch(error => console.error('error blin'));\n\n  const resJSON = await response.json();\n  return resJSON[\"anime\"];\n};\n/*let images = [];*/\n\n/*const imageSaver = (image, el) => {\n    images[el] = image;\n    return images[el];\n}*/\n/*export const getLargeImages = async () => {\n    console.log('getLargeImages started!')\n    let animelist = [...titlelist];\n    for (const el in animelist) {\n        await sleep(500).then(async () => {\n            getAnimeImage(animelist[el].id)\n                .then(image => {\n                    animelist[el]['image'] = imageSaver(image, el);\n                    return image;\n                });\n        });\n    };\n    console.log('animelist in getLargeImages is ', animelist);\n    titlelist = animelist;\n    console.log(JSON.stringify(animelist) === JSON.stringify(titlelist));\n    console.log('getLargeImages finished!')\n    return titlelist;\n}*/\n/*const getAnimeImage = async (mal_id) => {\n    const image_url = await fetch( `${API}anime/${mal_id}/pictures/`)\n        .then(res => {\n            return res.json();\n        });\n    const image = image_url.pictures[0]['large'];\n    //console.log(image);\n    return image;\n}*/\n\nconst getAnimelist = (anime, month, year) => {\n  let animelist = [];\n  animelist.push(anime.map((el) => el));\n  animelist = animelist[0];\n\n  for (const el in animelist) {\n    animelist[el] = {\n      id: animelist[el].mal_id,\n      title: animelist[el].title,\n      airing: animelist[el].airing_start,\n      image: animelist[el].image_url,\n      studio: animelist[el].producers[0],\n    };\n  }\n  titlelist = animelist;\n  sortAnime();\n  getAnimeByMonth(month, year);\n\n  //console.log(titlelist);\n  return true;\n};\n\nconst sortAnime = () => {\n  //console.log('sort has started!', titlelist);\n  let animelist = [...titlelist];\n\n  animelist.sort((a, b) => {\n    if (a.airing > b.airing) {\n      return 1;\n    } else if (a.airing < b.airing) {\n      return -1;\n    } else return 0;\n  });\n\n  titlelist = [...animelist];\n  //console.log('sort is finished!', titlelist);\n};\n\nexport const getLastDayOfMonth = (month, year) => {\n  return new Date(\n    year,\n    new Date(`01 ${month} ${year}`).getMonth() + 1,\n    0\n  ).getDate();\n};\n\nconst getAnimeByMonth = (month, year) => {\n  let animelist = [...titlelist];\n  let newlist = [];\n  newlist.length = getLastDayOfMonth(month, year);\n  newlist.length = 35;\n  newlist = fillNewList(newlist, month, year);\n  //console.log(\"newlist is\", newlist);\n\n  animelist.forEach((a, index) => {\n    if (\n      new Date(a.airing).getTime() <=\n        new Date(`31 ${month} ${year}`).getTime() &&\n      new Date(a.airing).getTime() >= new Date(`01 ${month} ${year}`).getTime()\n    ) {\n      //console.log(a, 'a.airing is true');\n      a.day = new Date(a.airing).getDate();\n      newlist[a.day - 1] = a;\n      return true;\n    }\n    return false;\n  });\n\n  //console.log(\"animelist after gabm is\", newlist);\n  titlelist = [...newlist];\n};\n\nconst fillNewList = (newlist, month, year) => {\n  let dumbTitle = {\n    id: \"\",\n    title: \"\",\n    airing: \"\",\n    image: \"\",\n    studio: { name: \"\" },\n  };\n\n  let animelist = [...newlist];\n  animelist.fill(dumbTitle, 0, animelist.length);\n  /*console.log(\n    \"Filled list is \",\n    animelist\n    //\"\\nlast day of month is \",\n    //lastDayOfMonth\n  );*/\n  return animelist;\n};\n\nconst animeScissors = async (year, season, month) => {\n  //console.log(`${API}season/${year}/${season}/`);\n  const animeJSON = await getSeason(year, season);\n  //console.log(animeJSON);\n  //let result = await getAnimelist(animeJSON);\n  return await getAnimelist(animeJSON, month, year);\n};\n\nconst sleep = (milliseconds) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport default animeScissors;\n","import React, { useEffect, useState } from \"react\";\nimport \"./container.css\";\nimport Day from \"./day\";\nimport animeScissors, { getLastDayOfMonth, titlelist } from \"../api/getanime\";\n\nconst Container = () => {\n  const [titles, setTitles] = useState([titlelist]);\n  const [month, setMonth] = useState(\"February\");\n  const [year, setYear] = useState(2020);\n\n  useEffect(() => {\n    (async function xd() {\n      console.log(`year: ${year} and month: ${month}`);\n      await animeScissors(year, getSeasonByMonth(month), month);\n      //console.log('Titlelist is ', titlelist);\n      console.log(\"titlelist had updated!\");\n      await setTitles((titles) => (titles = [...titlelist]));\n      //await getLargeImages();\n      //console.log('Titlelist comparison: ', titles, typeof titles);\n    })();\n  }, [month, year]);\n\n  const getSeasonByMonth = (month) => {\n    let season = \"\";\n    if (month === \"January\" || month === \"February\") {\n      season = \"winter\";\n    } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      season = \"spring\";\n    } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      season = \"summer\";\n    } else season = \"fall\";\n\n    return season;\n  };\n\n  const monthClick = () => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    setMonth((month) => (month = months[Math.ceil(Math.random() * 11)]));\n    console.log(\"Current season is\", getSeasonByMonth(month));\n  };\n\n  const yearClick = () => {\n    setYear((year) => (year = Math.ceil(Math.random() * 20) + 2000));\n  };\n\n  return (\n    <main className=\"Container\">\n      <div className=\"Head-Container\">\n        <div className=\"Date-nav\">\n          <div className=\"dateMonth padding-left\" onClick={monthClick}>\n            {month}\n          </div>\n          <div className=\"dateYear padding-right\" onClick={yearClick}>\n            {year}\n          </div>\n        </div>\n        <div className=\"Release-nav\">\n          <div className=\"padding-left\">Ongoing</div>\n          <div className=\"padding-right active\">New releases</div>\n        </div>\n      </div>\n\n      <div className=\"Days\">\n        {titles.length > 0 ? (\n          titles.map((el, i) => (\n            <Day\n              id={(i + 1).toString().padStart(2, \"0\")}\n              key={i}\n              ani={titles[i]}\n              ldm={getLastDayOfMonth(month, year)}\n            />\n          ))\n        ) : (\n          <div className=\"simpleText\">There is no data on this period</div>\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"Footer\">\n      <div className=\"footerRight\">Alex Shermann [2020]</div>\n      <div className=\"footerLeft\">\n        <p className=\"marker\">18+</p>\n        <a\n          href=\"https://github.com/shrmnn/malendar\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            alt=\"github link\"\n            aria-label=\"github link\"\n            height=\"32\"\n            width=\"32\"\n            src=\"https://unpkg.com/simple-icons@v2/icons/github.svg\"\n          />\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from \"./Components/header\";\nimport Container from \"./Components/container\";\nimport Footer from \"./Components/footer\";\n\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <div className='Content'>\n                <Header/>\n                <Container/>\n                <Footer/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}